{
	"id":"java0008",
	"name":"疯狂Java讲义(第3版)赠光盘/李刚java教材/java语言/计算机书/java教程",
	"src":"assets/index/java/java0008.jpg",
	"price":76,
	"post":0.00,
	"sail":134,
	"comment":26,
	"stock":98,
	"relate":[
					{
						"src":"assets/index/java/java0002.jpg",
						"name":"Java从入门到精通(第3版)",
						"price":87,
						"id":"java0002"
					},{
						"src":"assets/index/java/java0003.jpg",
						"name":"Java入门经典(第7版)",
						"price":87,
						"id":"java0003"
					},{
						"src":"assets/index/java/java0004.jpg",
						"name":"Haed first Java(中文版)",
						"price":47,
						"id":"java0004"
					},{
						"src":"assets/index/java/java0005.jpg",
						"name":"Java核心技术(卷1)",
						"price":87,
						"id":"java0005"
					},{
						"src":"assets/index/java/java0006.jpg",
						"name":"Java核心技术(卷2)",
						"price":94,
						"id":"java0006"
					},{
						"src":"assets/index/java/java0007.jpg",
						"name":"Java编程思想(第4版)",
						"price":72,
						"id":"java0007"
					},{
						"src":"assets/index/java/java0001.jpg",
						"name":"数据结构与算法分析（java语言描述）",
						"price":54,
						"id":"java0001"
					}
			],
	"basic":{
				"title":"疯狂Java讲义(第3版)",
				"packag":"否",
				"name":"疯狂Java讲义(第3版)",
				"price":"109.00元",
				"press":"电子工业出版社",
				"press_time":"2014/7/1",
				"author":"李刚",
				"block":"中国大陆",
				"format":"16开"
				},
	"book_info":"本书是《疯狂Java讲义》的第3版，第3版保持了前两版系统、全面、讲解浅显、细致的特性，全面新增介绍了Java 8的新特性，本书大部分示例程序都采用Lambda表达式、流式API进行了改写，因此务必使用Java 8的JDK来编译、运行。本书深入介绍了Java编程的相关方面，全书内容覆盖了Java的基本语法结构、Java的面向对象特征、Java集合框架体系、Java泛型、异常处理、Java GUI编程、JDBC数据库编程、Java注释、Java的IO流体系、Java多线程编程、Java网络通信编程和Java反射机制。覆盖了java.lang、java.util、java.text、java.io和java.nio、java.sql、java.awt、javax.swing包下绝大部分类和接口。本书全面介绍了Java 8的新的接口语法、Lambda表达式、方法引用、构造器引用、函数式编程、流式编程、新的日期、时间API、并行支持、改进的类型推断、重复注解、JDBC 4.2新特性等新特性。<br/><br/>与前两版类似，本书并不单纯从知识角度来讲解Java，而是从解决问题的角度来介绍Java语言，所以本书中涉及大量实用案例开发：五子棋游戏、梭哈游戏、仿QQ的游戏大厅、MySQL企业管理器、仿EditPlus的文本编辑器、多线程、断点下载工具、Spring框架的IoC容器……这些案例既能让读者巩固每章的知识，又可以让读者学以致用，激发编程自豪感，进而引爆内心的编程激情。本书光盘里包含书中所有示例的代码和《疯狂Java实战演义》的所有项目代码，这些项目可以作为本书课后练习的“非标准答案”，如果读者需要获取关于课后习题的解决方法、编程思路，可以登录http://www.crazyit.org站点与笔者及本书庞大的读者群相互交流。<br/>",
	"catalog":"第1章 Java语言概述与开发环境 1<br/>1.1 Java语言的发展简史 2<br/>1.2 Java的竞争对手及各自优势 4<br/>1.2.1 C#简介和优势 4<br/>1.2.2 Ruby简介和优势 5<br/>1.2.3 Python简介和优势 5<br/>1.3 Java程序运行机制 6<br/>1.3.1 高级语言的运行机制 6<br/>1.3.2 Java程序的运行机制和JVM 6<br/>1.4 开发Java的准备 8<br/>1.4.1 下载和安装Java 8的JDK 8<br/>不是说JVM是运行Java程序的虚拟机吗？那JRE和JVM的关系是怎样的呢？ 8<br/>为什么不安装公共JRE呢？ 9<br/>1.4.2 设置PATH环境变量 10<br/>为什么选择用户变量？用户变量与系统变量有什么区别？ 11<br/>1.5 第一个Java程序 12<br/>1.5.1 编辑Java源代码 12<br/>1.5.2 编译Java程序 12<br/>当编译C程序时，不仅需要指定存放目标文件的位置，也需要指定目标文件的文件名，这里使用javac编译Java程序时怎么不需要指定目标文件的文件名呢？ 13<br/>1.5.3 运行Java程序 13<br/>1.5.4 根据CLASSPATH环境变量定位类 14<br/>1.6 Java程序的基本规则 15<br/>1.6.1 Java程序的组织形式 15<br/>1.6.2 Java源文件的命名规则 16<br/>1.6.3 初学者容易犯的错误 17<br/>1.7 垃圾回收机制 19<br/>1.8 何时开始使用IDE工具 20<br/>我想学习Java编程，到底是学习Eclipse好，还是学习NetBeans好呢？ 21<br/>1.9 本章小结 21<br/>第2章 理解面向对象 22<br/>2.1 面向对象 23<br/>2.1.1 结构化程序设计简介 23<br/>2.1.2 程序的三种基本结构 24<br/>2.1.3 面向对象程序设计简介 26<br/>2.1.4 面向对象的基本特征 27<br/>2.2 UML（统一建模语言）介绍 28<br/>2.2.1 用例图 30<br/>2.2.2 类图 30<br/>2.2.3 组件图 32<br/>2.2.4 部署图 33<br/>2.2.5 顺序图 33<br/>2.2.6 活动图 34<br/>2.2.7 状态机图 35<br/>2.3 Java的面向对象特征 36<br/>2.3.1 一切都是对象 36<br/>2.3.2 类和对象 36<br/>2.4 本章小结 37<br/>第3章 数据类型和运算符 38<br/>3.1 注释 39<br/>3.1.1 单行注释和多行注释 39<br/>3.1.2 文档注释 40<br/>API文档是什么? 40<br/>为什么要学习查看API文档的方法？<br/>3.2 标识符和关键字 46<br/>3.2.1 分隔符 46<br/>3.2.2 标识符规则 47<br/>3.2.3 Java关键字 47<br/>3.3 数据类型分类 48<br/>什么是变量？变量有什么用？ 48<br/>3.4 基本数据类型 49<br/>3.4.1 整型 49<br/>3.4.2 字符型 51<br/>什么是字符集？ 51<br/>3.4.3 浮点型 53<br/>3.4.4 数值中使用下画线分隔 54<br/>3.4.5 布尔型 54<br/>3.5 基本类型的类型转换 55<br/>3.5.1 自动类型转换 55<br/>3.5.2 强制类型转换 56<br/>3.5.3 表达式类型的自动提升 58<br/>3.6 直接量 59<br/>3.6.1 直接量的类型 59<br/>3.6.2 直接量的赋值 59<br/>3.7 运算符 60<br/>3.7.1 算术运算符 60<br/>3.7.2 赋值运算符 63<br/>3.7.3 位运算符 63<br/>3.7.4 扩展后的赋值运算符 66<br/>3.7.5 比较运算符 66<br/>3.7.6 逻辑运算符 67<br/>3.7.7 三目运算符 68<br/>3.7.8 运算符的结合性和优先级 69<br/>3.8 本章小结 70<br/>第4 章 流程控制与数组 71<br/>4.1 顺序结构 72<br/>4.2 分支结构 72<br/>4.2.1 if条件语句 72<br/>4.2.2 Java 7增强后的switch分支语句 76<br/>4.3 循环结构 78<br/>4.3.1 while循环语句 78<br/>4.3.2 do while循环语句 79<br/>4.3.3 for循环 80<br/>4.3.4 嵌套循环 83<br/>4.4 控制循环结构 84<br/>4.4.1 使用break结束循环 84<br/>4.4.2 使用continue忽略本次循环剩下<br/>语句 85<br/>4.4.3 使用return结束方法 86<br/>4.5 数组类型 86<br/>4.5.1 理解数组：数组也是一种类型 86<br/>int[]是一种类型吗？怎么使用这种类型呢？ 87<br/>4.5.2 定义数组 87<br/>4.5.3 数组的初始化 88<br/>能不能只分配内存空间，不赋初始值呢？ 88<br/>4.5.4 使用数组 89<br/>为什么要我记住这些异常信息？ 89<br/>4.5.5 foreach循环 90<br/>4.6 深入数组 91<br/>4.6.1 内存中的数组 91<br/>为什么有栈内存和堆内存之分？ 92<br/>4.6.2 基本类型数组的初始化 94<br/>4.6.3 引用类型数组的初始化 95<br/>4.6.4 没有多维数组 97<br/>我是否可以让图4.13中灰色覆盖的数组元素再次指向另一个数组？这样不就可以扩展成三维数组，甚至扩展成更多维的数组吗？ 98<br/>4.6.5 Java 8增强的工具类：Arrays 99<br/>4.6.6 数组的应用举例 102<br/>4.7 本章小结 105<br/>本章练习 105<br/>第5 章 面向对象（上） 106<br/>5.1 类和对象 107<br/>5.1.1 定义类 107<br/>构造器不是没有返回值吗？为什么不能用void声明呢？ 109<br/>5.1.2 对象的产生和使用 110<br/>5.1.3 对象、引用和指针 110<br/>5.1.4 对象的this引用 111<br/>5.2 方法详解 115<br/>5.2.1 方法的所属性 115<br/>5.2.2 方法的参数传递机制 116<br/>5.2.3 形参个数可变的方法 119<br/>5.2.4 递归方法 120<br/>5.2.5 方法重载 122<br/>为什么方法的返回值类型不能用于区分重载的方法？ 122<br/>5.3 成员变量和局部变量 123<br/>5.3.1 成员变量和局部变量 123<br/>5.3.2 成员变量的初始化和内存中的<br/>运行机制 126<br/>5.3.3 局部变量的初始化和内存中的<br/>运行机制 128<br/>5.3.4 变量的使用规则 129<br/>5.4 隐藏和封装 130<br/>5.4.1 理解封装 130<br/>5.4.2 使用访问控制符 130<br/>5.4.3 package、import和import static 133<br/>5.4.4 Java的常用包 138<br/>5.5 深入构造器 138<br/>5.5.1 使用构造器执行初始化 138<br/>构造器是创建Java对象的途径，是不是说构造器完全负责创建Java对象？ 139<br/>5.5.2 构造器重载 139<br/>为什么要用this来调用另一个重载的构造器？我把另一个构造器里的代码复制、粘贴到这个构造器里不就可以了吗？ 141<br/>5.6 类的继承 141<br/>5.6.1 继承的特点 141<br/>5.6.2 重写父类的方法 142<br/>5.6.3 super限定 144<br/>5.6.4 调用父类构造器 146<br/>为什么我创建Java对象时从未感觉到java.lang. Object类的构造器被调用过？ 148<br/>5.7 多态 148<br/>5.7.1 多态性 148<br/>5.7.2 引用变量的强制类型转换 150<br/>5.7.3 instanceof运算符 151<br/>5.8 继承与组合 152<br/>5.8.1 使用继承的注意点 152<br/>5.8.2 利用组合实现复用 153<br/>使用组合关系来实现复用时，需要创建两个Animal对象，是不是意味着使用组合关系时系统开销更大？ 156<br/>5.9 初始化块 156<br/>5.9.1 使用初始化块 156<br/>5.9.2 初始化块和构造器 158<br/>5.9.3 静态初始化块 159<br/>5.10 本章小结 161<br/>第6 章 面向对象（下） 162<br/>6.1 Java 8增强的包装类 163<br/>Java为什么要对这些数据进行缓存呢? 166<br/>6.2 处理对象 167<br/>6.2.1 打印对象和toString方法 167<br/>6.2.2 ==和equals方法 169<br/>上面程序中判断obj是否为Person类的实例时，为何不用obj instanceof Person来判断呢？ 172<br/>6.3 类成员 172<br/>6.3.1 理解类成员 172<br/>6.3.2 单例（Singleton）类 173<br/>6.4 final修饰符 174<br/>6.4.1 final成员变量 175<br/>6.4.2 final局部变量 176<br/>6.4.3 final修饰基本类型变量和引用类<br/>型变量的区别 177<br/>6.4.4 可执行“宏替换”的final变量 178<br/>6.4.5 final方法 180<br/>6.4.6 final类 180<br/>6.4.7 不可变类 181<br/>6.4.8 缓存实例的不可变类 183<br/>6.5 抽象类 186<br/>6.5.1 抽象方法和抽象类 186<br/>6.5.2 抽象类的作用 189<br/>6.6 Java 8改进的接口 190<br/>6.6.1 接口的概念 190<br/>6.6.2 Java 8中接口的定义 190<br/>6.6.3 接口的继承 193<br/>6.6.4 使用接口 193<br/>6.6.5 接口和抽象类 195<br/>6.6.6 面向接口编程 195<br/>6.7 内部类 199<br/>6.7.1 非静态内部类 199<br/>非静态内部类对象和外部类对象的关系是怎样的？ 203<br/>6.7.2 静态内部类 203<br/>为什么静态内部类的实例方法也不能访问外部类的实例属性呢？ 204<br/>接口里是否能定义内部接口？ 205<br/>6.7.3 使用内部类 205<br/>既然内部类是外部类的成员，那么是否可以为外部类定义子类，在子类中再定义一个内部类来重写其父类中的内部类呢？ 208<br/>6.7.4 局部内部类 208<br/>6.7.5 Java 8改进的匿名内部类 209<br/>6.8 Java 8新增的Lambda表达式 212<br/>6.8.1 Lambda表达式入门 212<br/>6.8.2 Lambda表达式与函数式接口 214<br/>6.8.3 方法引用与构造器引用 216<br/>6.8.4 Lambda表达式与匿名内部类的<br/>联系和区别 218<br/>6.8.5 使用Lambda表达式调用Arrays<br/>的类方法 219<br/>6.9 枚举类 220<br/>6.9.1 手动实现枚举类 220<br/>6.9.2 枚举类入门 221<br/>6.9.3 枚举类的成员变量、方法和构造器 222<br/>6.9.4 实现接口的枚举类 224<br/>枚举类不是用final修饰了吗？怎么还能派生子类呢？ 225<br/>6.9.5 包含抽象方法的枚举类 225<br/>6.10 对象与垃圾回收 226<br/>6.10.1 对象在内存中的状态 227<br/>6.10.2 强制垃圾回收 227<br/>6.10.3 finalize方法 229<br/>6.10.4 对象的软、弱和虚引用 230<br/>6.11 修饰符的适用范围 233<br/>6.12 使用JAR文件 234<br/>6.12.1 jar命令详解 235<br/>6.12.2 创建可执行的JAR包 236<br/>6.12.3 关于JAR包的技巧 237<br/>6.13 本章小结 238<br/>本章练习 238<br/>第7 章 Java基础类库 239<br/>7.1 与用户互动 240<br/>7.1.1 运行Java程序的参数 240<br/>7.1.2 使用Scanner获取键盘输入 241<br/>7.2 系统相关 243<br/>7.2.1 System类 243<br/>7.2.2 Runtime类 245<br/>7.3 常用类 246<br/>7.3.1 Object类 246<br/>7.3.2 Java 7新增的Objects类 247<br/>7.3.3 String、StringBuffer和<br/>StringBuilder类 248<br/>7.3.4 Math类 251<br/>7.3.5 Java 7的ThreadLocalRandom<br/>与Random 253<br/>7.3.6 BigDecimal类 255<br/>7.4 Java 8的日期、时间类 257<br/>7.4.1 Date类 257<br/>7.4.2 Calendar类 258<br/>7.4.3 Java 8新增的日期、时间包 261<br/>7.5 正则表达式 263<br/>7.5.1 创建正则表达式 263<br/>7.5.2 使用正则表达式 266<br/>7.6 国际化与格式化 270<br/>7.6.1 Java国际化的思路 270<br/>7.6.2 Java支持的国家和语言 270<br/>7.6.3 完成程序国际化 271<br/>7.6.4 使用MessageFormat处理包含占<br/>位符的字符串 273<br/>7.6.5 使用类文件代替资源文件 274<br/>7.6.6 使用NumberFormat格式化数字 274<br/>7.6.7 使用DateFormat格式化日期、时间 276<br/>7.6.8 使用SimpleDateFormat格式化日期 277<br/>7.7 Java 8新增的日期、时间格式器 278<br/>7.7.1 使用DateTimeFormatter完成格式化 278<br/>7.7.2 使用DateTimeFormatter解析字符串 279<br/>7.8 本章小结 280<br/>本章练习 280<br/>......<br/>",
	"rate":"98%",
	"assess":[
				{
					"user":"aaaaa",
					"time":"2015-06-28 17:34:43",
					"content":"与我之前看到的评价不同，我收到的这书简直包装完美，印刷完美，纸质完美。而且内容丰富，讲的特别详细。绝对值这个价"
				},{
					"user":"bbbbb",
					"time":"2015-06-28 17:34:43",
					"content":"很棒的一本书！之前看了评论有点不敢买还特地去了新华书店，但是新华书店的也是没有塑封而且还破，关键还128。这本书的顺序和我现在用的两本教材都不一样，感觉这样的排版又新鲜又有乐趣，好评"
				},{
					"user":"ccccc",
					"time":"2015-06-28 17:34:43",
					"content":"很好，正版，很有分量，当然就像其他人说的，包装不会很仔细，不过书籍也没事，我买了三本就是放在一个纸箱里的，运来也还好，没有损坏 服务很好"
				},{
					"user":"ddddd",
					"time":"2015-06-28 17:34:43",
					"content":"书看起来像正版的，质量很好，包装也很好，物流给力，夜里拍的，夜里就发货了，第二天就到了，好评，下次买书就在这家买了"
				},{
					"user":"eeeee",
					"time":"2015-06-28 17:34:43",
					"content":"书很好，印刷很清晰，看着挺舒服的?好评"
				},{
					"user":"fffff",
					"time":"2015-06-28 17:34:43",
					"content":"书挺好的，包装就一层塑料纸，还好没破。物流很快，第二天就到了"
				},{
					"user":"ggggg",
					"time":"2015-06-28 17:34:43",
					"content":"好书，是正品，送货挺快的，不得不给一个五星好评。"
				},{
					"user":"hhhhh",
					"time":"2015-06-28 17:34:43",
					"content":"很好很好很好 很好很好很好 很好很好很好，是正品，就是书的外封皮有些破损，但完全不影响使用"
				},{
					"user":"iiiii",
					"time":"2015-06-28 17:34:43",
					"content":"物流很给力。转天就送到了。书没破损。内容我看不懂。但是我弟弟说挺好的。所以给的五星。"
				},{
					"user":"jjjjj",
					"time":"2015-06-28 17:34:43",
					"content":"字迹清晰，很好，纸张结实，讲的也是详细，例子还可以"
				},{
					"user":"kkkkk",
					"time":"2015-06-28 17:34:43",
					"content":"当当的物流一如既往的好！！赞！！！！！！！书也很不错，就是书的包装显得扣，不说了，学习去了！"
				},{
					"user":"lllll",
					"time":"2015-06-28 17:34:43",
					"content":"相当不错，绝对正版，很厚，肯定对学习特别有帮助，赞"
				},{
					"user":"mmmmm",
					"time":"2015-06-28 17:34:43",
					"content":"发票拖了半月才发，这效率还是别来坑人"
				},{
					"user":"nnnnn",
					"time":"2015-06-28 17:34:43",
					"content":"书没有损坏，其实也没有评论里说的那么严重，快递本来想给4星，但最后看快递员是个老大爷，心一酸，觉得谁都不容易啊，给5星"
				},{
					"user":"ooooo",
					"time":"2015-06-28 17:34:43",
					"content":"快递很快，隔天就到了，但是书右上角有折痕，而且不止一页。包装太简陋了，亲爱的店主你这是走贵书高冷风格吗，人靠衣装，书靠包装。虽说书的内容很精华，但是书这么厚不包装很容易折到。你让我这个强迫症情何以堪。"
				},{
					"user":"ppppp",
					"time":"2015-06-28 17:34:43",
					"content":"货收到了，快递很快，虽然包装不太好，书有划痕，但是里面是好的，没完美强迫症，可以看，是正版，纸张很好，想学知识的就别在意那么多不重要的细节了。好评。"
				},{
					"user":"qqqqq",
					"time":"2015-06-28 17:34:43",
					"content":"包装太寒酸了，不过还好书没有任何损伤，斥巨资买的书我要刷一波c"
				},{
					"user":"rrrrr",
					"time":"2015-06-28 17:34:43",
					"content":"为什么不用纸皮包一下，我拿到时你们的塑料袋包装都破了"
				},{
					"user":"sssss",
					"time":"2015-06-28 17:34:43",
					"content":"正版书，就是包装太一般了，封面上有印子"
				},{
					"user":"ttttt",
					"time":"2015-06-28 17:34:43",
					"content":"就包了一个袋………完全不知道爱护书籍，这个好评我是刷我的评价的"
				},{
					"user":"uuuuu",
					"time":"2015-06-28 17:34:43",
					"content":"包装真心破，像我这种经常在书上画娃娃的人都看不下去了，就一个快递袋，里面装了一本书，关键是快递袋还破了，其实你把包装搞好一点，加价5块钱我都可以接收。。。"
				},{
					"user":"vvvvv",
					"time":"2015-06-28 17:34:43",
					"content":"相当快啊，就是跑好远去取的。纸张特别好，很重。超值的。"
				},{
					"user":"wwwww",
					"time":"2015-06-28 17:34:43",
					"content":"发货很快，晚上11点多下的单，第二天上午就到了，目测是正版的，从纸张、印刷质量来看都还行"
				},{
					"user":"xxxxx",
					"time":"2015-06-28 17:34:43",
					"content":"速度很快，昨天晚上订的今天中午就到了，只可惜书并不是塑胶封的，磨损比较严重"
				},{
					"user":"yyyyy",
					"time":"2015-06-28 17:34:43",
					"content":"是很好，就是被压了。书边有折痕，对于有强迫症的我来说心里不好受，"
				},{
					"user":"zzzzz",
					"time":"2015-06-28 17:34:43",
					"content":"正在看，书的质量还不错，就是太难了，慢慢学哈哈"
				}
			]
}